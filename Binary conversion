# Ambrose Hundal 11/1/17
# lab3.asm-- 
#lab 3
#Decimal to binary conversion
#CE 12

.text
main:    
         #print Greeting message
	la       $a0, hello_msg    #load address of hello_msg in $a0
	li       $v0, 4 	   # syscall 4 to print
	syscall 
	
	la       $a0, newline      #load address of newline (\n) 
	li       $v0, 4
	syscall
	
	
	#print Input number
        la       $a0, input 	   #load address of input message
	li       $v0, 4
	syscall  
	
	#move input number address into $s0
	move	 $s0,$a1	   #move contents of $a1 to $s0 
	lw 	 $a0,($s0)         #load contents of $s0 to $a0
	li	 $v0, 4 
	syscall 	
	
	#print newline
	la       $a0, newline     
	li       $v0, 4
	syscall
	
	#print output message
	la       $a0, output  
	li       $v0, 4
	syscall
	
	
	
	lw       $s0, ($s0)      
	
	and      $t1, $t1, 0 	     #initialize $t1 to 0
	and      $t0, $t0, 0         #initialize $t0 to 0
	and 	 $t4, $t4, 0         #initialize $t4 to 0
	and 	 $t5, $t5, 0         #initialize $t5 to 0
	li 	 $s5, 0x80000000     #load bitmask in $s5
	add  	 $t6, $t6, 32 	     #counter set to 32 in $t6
	
				     #loop to convert input from ASCII to integer form
loop: 									
	lb       $s1, 0($s0)	     #load first byte into $s1, and then the next byte as the loop executes
        beq      $s1, 45, flag       #if s1 is (-) or 45, branch to flag
	nop
	beq      $s1, 0, endstring #if loop is at end (null), go to endstring
	nop
	
	#start conversion
	mul      $t0, $t0, 10   #multiply first digit of input byte
	sub 	 $t2, $s1, 48 	#subtract the ascii value 48 to get integer and store in t2
	add	 $t0, $t0, $t2  #add the resulting number to $t0
offset:	add      $s0, $s0, 1   #increment offset address to point to next byte
	b 	 loop          #branch to start of loop again. The loop will keep executing till it reaches null (\0)
	nop      
endstring:
	beq 	 $s7, 1, invert #if flag was one, take the 2's complement (invert the number)
	nop
	beq 	$s7, 0, mask    #if flag was not one, branch to mask
	nop
	
		 
	
	
flag:      
	and      $s7, $s7, 0   #set flag to 1 if we know first byte is '-'
	add      $s7, $s7, 1   
	b 	 offset        #once flag is set, branch to offset where we move on to the next byte by incrementing the address
	nop
	
			       #2SC
invert:
	not      $t0, $t0  #invert the number by NOT
	add 	 $t0, $t0, 1  #add 1
	b mask
	nop
			   #print zero
zero:
	li 	 $a0, 0
	li 	 $v0, 1
	syscall
	b 	 mask
	nop
			  #print one
one:
	li 	 $a0, 1   
	li 	 $v0, 1
	syscall
	b 	 mask
	nop
	
		       	
mask:
	blez 	 $t6, maskoff   #if end of loop, go to maskoff (While $t6 > 0)
	nop
	and 	 $s3, $t0, $s5 #and mask with user input number
	srl 	 $s5, $s5, 1  #shift left bit by 1
	add 	 $t6, $t6, -1 #decrement counter
	
	beq 	 $s3, 0, zero #if $s3 is 0, branch to zero
	b 	 one 	      #else print 1
	nop
		
maskoff:	
	li	 $v0, 10 # 10 is the exit syscall.
	syscall 	# do the syscall.
# Data for the program:
.data
hello_msg: .asciiz 	"Aloha!"
input:     .asciiz      "Input number: "
newline:   .asciiz      "\n"
output:    .asciiz      "Output number: "
# end hello.asm


